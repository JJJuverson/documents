(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{384:function(a,s,t){"use strict";t.r(s);var e=t(3),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("public class Test{\n  public static void main(String[] args){\n    \n  }\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h2",{attrs:{id:"java标识符（凡是程序员自己有权利命名的单词都是标识符）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java标识符（凡是程序员自己有权利命名的单词都是标识符）"}},[a._v("#")]),a._v(" Java标识符（凡是程序员自己有权利命名的单词都是标识符）")]),a._v(" "),t("ul",[t("li",[a._v("但是main是一个方法的名称是一个标识符，但不能修改，是语言发明者定义的")]),a._v(" "),t("li",[a._v("标识符可以标识：类名，方法名，变量名，接口名，常量名。。。")])]),a._v(" "),t("h2",{attrs:{id:"标识符的命名规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标识符的命名规则"}},[a._v("#")]),a._v(" 标识符的命名规则")]),a._v(" "),t("ul",[t("li",[a._v("标识符只能由数组，字母，下划线，$,不能含有其他符号")]),a._v(" "),t("li",[a._v("标识符不能以数字开头")]),a._v(" "),t("li",[a._v("关键字不能做标识符（public,class,void,static）")]),a._v(" "),t("li",[a._v("标识符严格区分大小写")])]),a._v(" "),t("h2",{attrs:{id:"变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),t("ul",[t("li",[a._v("变量其实就是内存当中存储数据的最基本单元。")]),a._v(" "),t("li",[a._v("在java语言中任何数据都是有数据类型的，例如整数型：int。不同的数据类型，在内存中分配的空间不同。")]),a._v(" "),t("li",[a._v("变量三要素：变量的类型，名字，和保存的值。")])]),a._v(" "),t("h3",{attrs:{id:"变量的声明和定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量的声明和定义"}},[a._v("#")]),a._v(" 变量的声明和定义")]),a._v(" "),t("ul",[t("li",[a._v("数据类型 变量名 例如：int nianLing;")]),a._v(" "),t("li",[a._v("注意，方法体当中的代码遵循自上而下的顺序依此逐行执行。")]),a._v(" "),t("li",[a._v("在同一个域中变量名不能重复声明（跟类型无关）。")])]),a._v(" "),t("h3",{attrs:{id:"变量的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量的分类"}},[a._v("#")]),a._v(" 变量的分类")]),a._v(" "),t("ul",[t("li",[a._v("在方法体中声明的变量成为局部变量，在类体内声明的变量成为成员变量。\n局部变量只在方法体当中有效，方法体执行结束，该变量内存也就释放了。")])]),a._v(" "),t("h3",{attrs:{id:"变量的作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量的作用域"}},[a._v("#")]),a._v(" 变量的作用域")]),a._v(" "),t("ul",[t("li",[a._v("什么是作用域：变量的有效范围。")]),a._v(" "),t("li",[a._v("记住：变量作用域，出了大括号就不认识了。")]),a._v(" "),t("li",[a._v("java中很重要的原则：就近原则")])]),a._v(" "),t("h2",{attrs:{id:"数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[a._v("#")]),a._v(" 数据类型")]),a._v(" "),t("ul",[t("li",[a._v("基本数据类型：整数型（byte,short int long）,浮点型（float,double）,布尔型（boolean）,字符型（char）")]),a._v(" "),t("li",[a._v("引用数据类型：字符串型string属于引用数据类型。除了基本数据类型，都是引用数据类型")])]),a._v(" "),t("h2",{attrs:{id:"计算机存储单位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算机存储单位"}},[a._v("#")]),a._v(" 计算机存储单位")]),a._v(" "),t("ul",[t("li",[a._v("1字节 = 8bit =>1byte = 8bit; 1bit就是1或0")]),a._v(" "),t("li",[a._v("1k=1024byte")]),a._v(" "),t("li",[a._v("基本数据类型占用字节数量,byte:1;short:2;int:4;long:8; float:4;double:8;boolean:1;char:2;\nbyte是[-128~127] short是[-32768~32767] char是[0~65535]\n在计算机中最左边位表示符号位，0表示正，1表示负\nshort和char实际容量相同，但char可以表示更大的数字。char表示的是文字，没有正负之分。")])]),a._v(" "),t("h2",{attrs:{id:"字符编码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符编码"}},[a._v("#")]),a._v(" 字符编码")]),a._v(" "),t("p",[a._v("ASCII：'a'--\x3e97;'A'--\x3e65;'0'--\x3e48\nASCII\nISO-8859-1(latin-1)\nGB2312\nGBK\nGB18030\nBig5 繁体中文\nunicode(utf-8,utf-16,utf-32)")]),a._v(" "),t("h2",{attrs:{id:"转义字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转义字符"}},[a._v("#")]),a._v(" 转义字符")]),a._v(" "),t("ul",[t("li",[a._v("java语言中''负责转义；\\的出现会将\\后面的相邻字符进行转义；")]),a._v(" "),t("li",[a._v("'\\'两个反斜杠代表一个普通的\\")])]),a._v(" "),t("h2",{attrs:{id:"整型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整型"}},[a._v("#")]),a._v(" 整型")]),a._v(" "),t("ul",[t("li",[a._v('在java中，整数型的字面量默认被当作int类型处理，如果希望该字面量被当作\nlong类型来处理，需要在字面量后面加上"L/l"')]),a._v(" "),t("li",[a._v("小容量可以直接转化位大容量类型，叫自动类型转化")]),a._v(" "),t("li",[a._v("大容量转化成小容量，要想编译通过，需要添加强制类型转换符[(int)100]，但运行时可能损失精度")])]),a._v(" "),t("h2",{attrs:{id:"二进制原码，反码，补码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二进制原码，反码，补码"}},[a._v("#")]),a._v(" 二进制原码，反码，补码")]),a._v(" "),t("ul",[t("li",[a._v("对于正数：二进制原码，反码，补码都是它本身")]),a._v(" "),t("li",[a._v("对于负数：反码--\x3e符号位不变，其余求反；补码为反码+1")])]),a._v(" "),t("h2",{attrs:{id:"浮点型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点型"}},[a._v("#")]),a._v(" 浮点型")]),a._v(" "),t("ul",[t("li",[a._v("float 单精度；double 双精度；")]),a._v(" "),t("li",[a._v("在java中，如果在银行或者财务方面，double也是远远不够，java提供了一种精度更高的类型\njava.math.BigDecimal.")]),a._v(" "),t("li",[a._v("在float和double存储数据时，存储的都是近似值")]),a._v(" "),t("li",[a._v("任意一个浮点型存储的空间都比整数型空间大得多")]),a._v(" "),t("li",[a._v("java中规定任意一个浮点型数据默认当作double类型来处理，如果想让这个浮点型被当作float类型处理\n那么在后面添加'F/f'。")])]),a._v(" "),t("h2",{attrs:{id:"基本类型转化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本类型转化"}},[a._v("#")]),a._v(" 基本类型转化")]),a._v(" "),t("ul",[t("li",[a._v("八种数据类型，除了boolean类型不能转化，剩余七种类型之间都可以进行转化。")]),a._v(" "),t("li",[a._v("如果整型字面量没有超出byte，short, char范围，可以直接将其赋值。")]),a._v(" "),t("li",[a._v("容量排序：byte< short(char) < int < long < float < double .小到大转化成为自动转化")]),a._v(" "),t("li",[a._v("大容量转化成小容量需要强制转化。")]),a._v(" "),t("li",[a._v("byte,short,char混合运算时，先转化成int类型再运算。")]),a._v(" "),t("li",[a._v("多种混合类型运算时，先自动转化成容量最大的再做运算")])]),a._v(" "),t("h2",{attrs:{id:"运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[a._v("#")]),a._v(" 运算符")]),a._v(" "),t("ul",[t("li",[a._v("算术运算符：+ - * / ++ --")]),a._v(" "),t("li",[a._v("关系运算符有：> < = != >= <= (运算结果一定是布尔型)")]),a._v(" "),t("li",[a._v("逻辑运算符： &(与) |(或) !(非) &&(短路与) ||(短路或)\ntrue & true --\x3etrue   (一假为假)\n或（一真为真）")]),a._v(" "),t("li",[a._v("赋值运算符：= += -= *= /=\n很重要的语法机制：使用扩展运算符永远不会改变运算结果类型")]),a._v(" "),t("li",[a._v("条件运算符(三目运算符):布尔表达式？表达式1：表达式2")]),a._v(" "),t("li",[a._v("字符串连接运算符：+\n当加号运算符两边都是数字类型时，求和，当字符串任意一边是字符串类型时是字符串拼接。")])]),a._v(" "),t("h2",{attrs:{id:"java接收用户键盘输入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java接收用户键盘输入"}},[a._v("#")]),a._v(" java接收用户键盘输入")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//创建键盘扫描器对象\njava.util.Scanner s = new java.util.Scanner(System.in);\n//代码执行到这会停下来，等待键盘输入，然后回车\nint i = s.nextInt(); //接收键盘数据\nString str = s.next(); //接收字符串\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h2",{attrs:{id:"控制语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制语句"}},[a._v("#")]),a._v(" 控制语句")]),a._v(" "),t("h3",{attrs:{id:"选择语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择语句"}},[a._v("#")]),a._v(" 选择语句")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("if: 是条件语句")])]),a._v(" "),t("li",[t("p",[a._v("第一种  if(布尔表达式){java语句;}")])]),a._v(" "),t("li",[t("p",[a._v("第二种  if(布尔表达式){java语句;}else{java语句;}")])]),a._v(" "),t("li",[t("p",[a._v("第三种  if(布尔表达式){java语句;}else if(布尔表达式1){java语句;} ...")])]),a._v(" "),t("li",[t("p",[a._v("第四种  if(布尔表达式){java语句;}else if(布尔表达式1){java语句;} ...else{java语句;}")])]),a._v(" "),t("li",[t("p",[a._v("注意，对于if来说，任何情况下只能有一个分支执行，只要有一个分支执行了，整个if语句就结束了。")])]),a._v(" "),t("li",[t("p",[a._v("当分支当中，java语句只要一条时，大括号可以省略，一般为了可读性不省略。")])]),a._v(" "),t("li",[t("p",[a._v("switch")])])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("- switch(值){\n  case 值1:\n    java语句;\n    ...\n    break;\n  case 值2:\n    java语句;\n    ...\n    break;\n  default:\n    java语句;\n} 其中break不是必须的，default分支也不是必须的;switch支持int与string类型，但是byte,short,char也可以自动进行类型转换。\n其中比较时会使用双等号\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br")])]),t("h3",{attrs:{id:"循环语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环语句"}},[a._v("#")]),a._v(" 循环语句")]),a._v(" "),t("ul",[t("li",[a._v("for")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for(初始化表达式;条件表达式;更新表达式){\n  循环体\n}\n//初始化表达式最先执行，并且在整个表达式中只执行一次\n//条件表达式是一个布尔类型，当条件表达式为真时才会去执行循环体\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for嵌套for\nfor(){\n  //在分析for循环的时候，把里面的for当作一段普通的java语句/代码\n  for(){}\n}\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("ul",[t("li",[a._v("while")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("while(布尔表达式){\n  循环体;\n}\n执行原理：判断布尔表达式的结果，如果为真，则执行循环体，直至为false;\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("ul",[t("li",[a._v("do while")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("do{\n  循环体;\n}while(布尔表达式);\n//最后while要加分号\n// 先去执行循环体中的代码一次，再去判断布尔表达式，如果为true，再去执行，再去判断。直到为false\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h3",{attrs:{id:"转向语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转向语句"}},[a._v("#")]),a._v(" 转向语句")]),a._v(" "),t("ul",[t("li",[a._v("break")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("1.break语句是一个单词成为一个java语句，continue也一样。\n2.可以用在switch语句中，用来终止switch\n3.也可以用在循环语句中，用来终止循环的执行\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("ul",[t("li",[a._v("continue")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("作用：用来终止当前“本次循环”，直接进入下一次循环继续执行。\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("ul",[t("li",[a._v("return")])])])}),[],!1,null,null,null);s.default=n.exports}}]);